{"version":3,"file":"static/js/310.d6852890.chunk.js","mappings":"kRAEaA,E,OAAkBC,GAAAA,IAAH,u/B,SCsE5B,EAlEe,WACb,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,MAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAcJ,EAAaK,IAAI,SAC/BC,GAAmBC,EAAAA,EAAAA,QAAOH,IAEhCI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQ,mCAAG,iGAETH,EAAiBI,QAFR,iCAGQC,EAAAA,EAAAA,IAAgBL,EAAiBI,SAHzC,OAGLE,EAHK,OAIXd,EAAUc,GAJC,uDAObhB,EAAS,KAAMiB,SAPF,yDAAH,qDAUdJ,GACD,GAAE,IAEH,IAAMK,EAAO,mCAAG,WAAMC,GAAN,4EACdA,EAAEC,iBACIC,EAAQjB,EAAaK,IAAI,SAFjB,UAIRY,EAJQ,wBAKVhB,EAAgB,CAAEgB,MAAAA,IALR,UAMaN,EAAAA,EAAAA,IAAgBP,GAN7B,OAMJc,EANI,OAOVpB,EAAUoB,GAPA,wBASVC,EAAAA,OAAAA,QAAe,6BATL,0DAYZvB,EAAS,KAAMiB,SAZH,0DAAH,sDAsBb,OACE,UAACrB,EAAD,YACE,kBAAM4B,SAAUN,EAAhB,WACE,kBAAOO,KAAK,QAAQC,SATA,SAAAP,GACxB,IAAMQ,EACsB,KAA1BR,EAAES,OAAOC,MAAMC,OAAgB,CAAET,MAAOF,EAAES,OAAOC,OAAU,CAAC,EAC9DxB,EAAgBsB,EACjB,KAMK,mBAAQI,KAAK,SAAb,uBAED9B,IACC,wBACGA,EAAO+B,KAAI,SAAAC,GAAK,OACf,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAM/B,GAAxC,SACG2B,EAAMK,SAFFL,EAAME,GADA,MASpBpC,IAAS,uBAAIA,MAGnB,C,6LCrEKwC,EAAU,+BACVC,EAAU,mCAEHC,EAAiB,mCAAG,4FACT,sBAChBC,EAAUH,EADM,sBACN,mBAAsCC,GAFvB,SAGRG,EAAAA,GAAAA,IAAUD,GAHF,cAGzBpB,EAHyB,yBAIxBA,EAASN,KAAK4B,SAJU,2CAAH,qDAOjB7B,EAAe,mCAAG,WAAMM,GAAN,gFACvBqB,EAAUH,EAAO,gCAA4BC,EAA5B,kBAA6CnB,GADvC,SAENsB,EAAAA,GAAAA,IAAUD,GAFJ,cAEvBpB,EAFuB,yBAGtBA,EAASN,KAAK4B,SAHQ,2CAAH,sDAMfC,EAAY,mCAAG,WAAMV,GAAN,gFACpBO,EAAUH,EAAO,iBAAaJ,EAAb,oBAA2BK,GADxB,SAEHG,EAAAA,GAAAA,IAAUD,GAFP,cAEpBpB,EAFoB,yBAGnBA,EAASN,MAHU,2CAAH,sDAMZ8B,EAAY,mCAAG,WAAMX,GAAN,gFACpBO,EAAUH,EAAO,iBAAaJ,EAAb,4BAAmCK,GADhC,SAEHG,EAAAA,GAAAA,IAAUD,GAFP,cAEpBpB,EAFoB,yBAGnBA,GAHmB,2CAAH,sDAMZyB,EAAe,mCAAG,WAAMZ,GAAN,gFACvBO,EAAUH,EAAO,iBAAaJ,EAAb,4BAAmCK,GAD7B,SAENG,EAAAA,GAAAA,IAAUD,GAFJ,cAEvBpB,EAFuB,yBAGtBA,GAHsB,2CAAH,qD","sources":["pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","services/MovieApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MoviesContainer = styled.div`\n  padding: 20px 0;\n\n  form {\n    display: flex;\n    gap: 20px;\n\n    input {\n      padding: 5px 10px;\n      border-radius: 7px;\n      border: 1px solid black;\n      transition: border 250ms;\n      :hover,\n      :focus {\n        border-color: #a31525;\n      }\n    }\n\n    button {\n      border-radius: 7px;\n      border: none;\n      background-color: #a31525;\n      color: white;\n      padding: 5px 10px;\n      font-size: 18px;\n      transition: background-color 250ms;\n\n      :hover,\n      :focus {\n        background-color: #312d2d;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    flex-direction: column;\n    flex-wrap: wrap;\n    max-height: 80vh;\n    list-style-type: none;\n    padding-left: 0;\n  }\n\n  a {\n    display: inline-block;\n    color: black;\n    padding: 5px;\n    border-radius: 5px;\n    transition: background-color 250ms, color 250ms;\n\n    :hover,\n    :focus {\n      background-color: #a31525;\n      color: white;\n    }\n  }\n`;\n","import { useState, useEffect, useRef } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { getMovieByQuery } from 'services/MovieApi';\nimport { MoviesContainer } from './Movies.styled';\n\nconst Movies = () => {\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const queryString = searchParams.get('query');\n  const firstRenderQuery = useRef(queryString);\n\n  useEffect(() => {\n    const getFilms = async () => {\n      try {\n        if (firstRenderQuery.current) {\n          const data = await getMovieByQuery(firstRenderQuery.current);\n          setMovies(data);\n        }\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    getFilms();\n  }, []);\n\n  const onQuery = async e => {\n    e.preventDefault();\n    const query = searchParams.get('query');\n    try {\n      if (query) {\n        setSearchParams({ query });\n        const response = await getMovieByQuery(queryString);\n        setMovies(response);\n      } else {\n        Notify.warning('You should type something');\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const updateQueryString = e => {\n    const nextParams =\n      e.target.value.trim() !== '' ? { query: e.target.value } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <MoviesContainer>\n      <form onSubmit={onQuery}>\n        <input name=\"query\" onChange={updateQueryString}></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      {movies && (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n      {error && <p>{error}</p>}\n    </MoviesContainer>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\nconst BaseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '583f93eb1f9f03306dbe56dd02574154';\n\nexport const getTrendingMovies = async () => {\n  const trendingDaily = '/trending/movie/day';\n  const request = BaseURL + trendingDaily + `?api_key=${API_KEY}`;\n  const response = await axios.get(request);\n  return response.data.results;\n};\n\nexport const getMovieByQuery = async query => {\n  const request = BaseURL + `/search/movie?api_key=${API_KEY}&query=${query}`;\n  const response = await axios.get(request);\n  return response.data.results;\n};\n\nexport const getMovieByID = async id => {\n  const request = BaseURL + `/movie/${id}?api_key=${API_KEY}`;\n  const response = await axios.get(request);\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const request = BaseURL + `/movie/${id}/credits?api_key=${API_KEY}`;\n  const response = await axios.get(request);\n  return response;\n};\n\nexport const getMovieReviews = async id => {\n  const request = BaseURL + `/movie/${id}/reviews?api_key=${API_KEY}`;\n  const response = await axios.get(request);\n  return response;\n};\n"],"names":["MoviesContainer","styled","useState","error","setError","movies","setMovies","useSearchParams","searchParams","setSearchParams","location","useLocation","queryString","get","firstRenderQuery","useRef","useEffect","getFilms","current","getMovieByQuery","data","message","onQuery","e","preventDefault","query","response","Notify","onSubmit","name","onChange","nextParams","target","value","trim","type","map","movie","to","id","state","from","title","BaseURL","API_KEY","getTrendingMovies","request","axios","results","getMovieByID","getMovieCast","getMovieReviews"],"sourceRoot":""}